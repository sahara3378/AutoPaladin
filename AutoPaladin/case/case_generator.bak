# coding=utf-8
import os
import shutil
import sys
import time
import traceback
import openpyxl
from tool import logger, configs
from paladin.type import *


def _generate_script(repstr):
    """
    格式化用例编写的自定义脚本，补齐try/catch，以及处理脚本占位符合用例脚本
    Args:
        repstr: 输入脚本

    Returns:
        处理过后的脚本
    """
    result = []
    lines = repstr.split('\n')
    for line in lines:
        hasletter = False
        result_line = []
        for s in line:
            if s == ' ' and not hasletter:  # 行首的空格替换成Tab占位
                result_line.append('\t')
            else:
                hasletter = True
                result_line.append(s)
        result.append('\t\t\t' + ''.join(result_line))
    result = ['\t\ttry:'] + result + ['\t\texcept Exception as ex:', '\t\t\tlogger.error(\'执行自定义脚本发生异常:%s\' % ex)',
                                      '\t\t\tfrom paladin.type import ExpectType',
                                      '\t\t\tself.paladin.get_expect(ExpectType.TAKESCREEN,\'%s_自定义脚本异常\' % case[\'用例编号\'])',
                                      '\t\t\tassert False']
    result = '\n'.join(result)
    return result


def _get_variable(varname):
    """
    解析变量，例如[sysdate]返回YYYY-MM-DD

    Args:
        varname:[变量名]

    Returns:
        变量值，若格式不正确或不支持的变量，直接返回原值

    """
    if varname is None:
        return None

    if isinstance(varname, str):
        # varname = str(varname)
        if varname.startswith('[') and varname.endswith(']'):
            v = varname[1:-1]
            if v == 'sysdate':  # 系统日期：2020-11-11
                return time.strftime('%Y-%m-%d', time.localtime(time.time()))
            elif v == 'sysdate_scope':  # 系统日期区间：2020-11-11 - 2020-11-11
                return _get_variable('[sysdate]') + ' - ' + _get_variable('[sysdate]')
            else:
                logger.warn('%s 为变量形式，但不支持解析，返回原值' % varname)
                return varname
        elif 'return' in varname:  # 执行自定义代码块获取结果，注意必须有return
            try:
                script = 'def test():\n' + _generate_script(varname)
                constant = globals().copy()
                exec(script, constant)
                return constant['test']()
            except:
                logger.error('执行自定义代码块出现异常！')
                traceback.print_stack()
                return None
        else:
            return varname
    else:
        return varname


class CaseGenerator:
    """
    测试用例脚本生成器
    """

    def __init__(self, filename):
        self.filename = filename
        self._read_excel()

    def _read_excel(self):
        """
        读取excel内容

        Returns:

        """
        try:
            self.book = openpyxl.load_workbook(self.filename, data_only=True)
        except Exception as ex:
            logger.cri('读取excel异常：%s', self.filename)
            logger.error(ex)
            traceback.print_stack()

    def read_excel_scope(self, scope_str):
        """
        读取excel指定区域范围的数据

        Args:
            scope_str: 读取区域，形如：Sheet1|A1:B3；紫红Sheet1代表读取的sheet页，A1:B3代表获取的区域，注意一定要把标题行包含进去

        Returns:
            list[dict]:excel数据内容。形如：[{'title1':'a','title2':'b'},{'title1':'c','title2':'d'},{'title1':'e','title2':'f'}]
        """
        assert '|' in scope_str and ':' in scope_str, '格式错误，应如;Sheet1|A1:B3'

        sheetname = scope_str.split('|')[0]
        scope = scope_str.split('|')[1].split(':')
        try:
            sheet = self.book[sheetname]
            rows = sheet[str(scope[0]):str(scope[1])]
            assert len(rows) > 1, '无有效数据;范围不正确'

            data = []
            ths = list(i.value for i in rows[0])
            for row in rows[1:]:
                cells = list(str(i.value).replace('None', '') for i in row)
                data.append(dict(zip(ths, cells)))

            return data
        except Exception as ex:
            logger.error('读取excel指定区域内容数据异常！')
            logger.error(ex)
            traceback.print_stack()

    def generate_case(self):
        """
        根据excel用例生成用例脚本；
        一个文件一个package，一个sheet页一个脚本文件；
        用例的sheet页名称必须以“用例—”开头

        Returns:
        """
        # MeterSpere
        MSCases = []
        MSCase = {}
        try:
            logger.info('----------开始处理文件：%s----------' % self.filename)
            packagename = os.path.splitext(os.path.basename(self.filename))[0]
            packagename_f = os.path.join('TestCase', packagename)
            if os.path.exists(packagename_f):
                shutil.rmtree(packagename_f)
            os.mkdir(os.path.join('TestCase', packagename))
            logger.info('创建了文件夹：【%s】' % packagename)

            sheetcnt = 0

            for sheetname in self.book.sheetnames:  # 循环sheet页，sheet页名称必须以“用例-”开头；一个sheet页一个脚本
                if not '用例-' in sheetname:
                    continue
                casename = sheetname.replace('用例-', '')
                logger.info('******开始生成用例脚本：【%s】' % casename)
                sheet = self.book[sheetname]
                rowcnt = sheet.max_row
                colcnt = sheet.max_column
                logger.info('【%s】有效行数:%s，有效列数:%s' % (sheetname, rowcnt, colcnt))

                # 用例的列名
                title = []
                for x in range(1, colcnt + 1):
                    title.append(sheet.cell(row=1, column=x).value)

                filename = os.path.join('TestCase', packagename, 'test_%s_%s.py' % (packagename, casename))
                with open(filename, 'w+', encoding='utf-8') as classfile:

                    case_id = ''  # 记录用例编号
                    case_cnt = 0  # 记录用例条数

                    # 头部信息
                    classfile.write('# coding=utf-8\r\n')
                    classfile.write('import sys\n')
                    classfile.write('import pytest,allure\n')
                    classfile.write('from tool import logger\n')
                    classfile.write('from paladin import Paladin\r\n')

                    # 类定义
                    classfile.write('@pytest.mark.%s\n' % packagename)  # 用于筛选测试用例
                    classfile.write('class Test_%s:\n' % casename)

                    # 执行前的操作
                    classfile.write('\tdef setup_class(self):\n')
                    classfile.write('\t\tself.paladin = Paladin(None)\n\n')

                    # 循环用例内容
                    for row in sheet.iter_rows(min_row=2, max_col=colcnt):
                        row_value = list(cell.value if cell.value != None else '' for cell in row)
                        if row_value[0] == None:  # 编号ID为空过滤
                            continue
                        if row_value[1] == '否':  # 过滤不启用的用例
                            continue

                        if not self.check_case(dict(zip(title, row_value))):
                            logger.error('用例编号【%s】检查不通过，请检查！' % row_value[0])
                            sys.exit(1)

                        case = {}
                        for colnum in range(colcnt):
                            if title[colnum] == '预期结果':
                                expect_value = row_value[colnum]
                                if expect_value is None:  # 预期结果为空时默认预期结果为True，即1
                                    case[title[colnum]] = 1
                                elif '|' in str(expect_value):  # 预期结果包含竖线|，代表需额外读取excel内的区域值
                                    case[title[colnum]] = self.read_excel_scope(expect_value)
                                else:
                                    case[title[colnum]] = _get_variable(expect_value)
                            elif title[colnum] == '是否启用':
                                continue
                            else:
                                case[title[colnum]] = _get_variable(row_value[colnum])

                        # 如果用例编号和上次记录的不一致说明是下一条用例，则新建方法，以test_开头
                        if case_id != row_value[0]:
                            case_id = row_value[0]
                            # MeterSpere
                            if MSCase:
                                MSCases.append(MSCase)
                            case_cnt += 1
                            step_seq = 1
                            classfile.write(
                                '\t@allure.title(\'%s_%s\')\n' % (case_id, case['名称'] if case['名称'] != None else ''))
                            classfile.write('\tdef test_%s(self):\n' % case_id)
                            # MeterSpere
                            MSCase = {}
                            MSCaseSteps = []
                            MSCase["case_id"] = case_id
                            MSCase["case_name"] = case['名称']
                            MSCase["project"] = 'Saas'
                            MSCase["suit"] = casename
                        else:
                            step_seq += 1
                            pass

                        if case['前置类型'] == '自定义脚本':
                            classfile.write('\t\tlogger.info(\'执行前置自定义脚本\')\n')
                            classfile.write('%s\n' % _generate_script(case['前置条件']))
                            case['前置类型'] = None
                            case['前置条件'] = None

                        # 操作类型特殊处理
                        if case['操作类型'] == '用例':  # 如果是用例调用其它用例：
                            for x in case['操作步骤'].replace('，', ',').split(','):
                                classfile.write('\t\t#执行其它用例：%s\n' % x)
                                classfile.write('\t\tself.test_%s()\n\n' % x)
                        elif case['操作类型'] == '自定义脚本':  # 如果是自定义脚本（自定义脚本每行前的tab占位符可以用空格来代替，写用例后要校验一下脚本能否编译通过）：
                            classfile.write('\t\tcase = %s\n' % str(case))
                            classfile.write('\t\tlogger.info(\'执行用例自定义脚本\')\n')
                            classfile.write('%s\n' % _generate_script(case['操作步骤']))
                            # classfile.write('\t\tresult = self.paladin.do_action(case)\n')
                        else:
                            classfile.write('\t\tcase = %s\n' % str(case))
                            # MeterSpere
                            MSCaseStep = {"step_seq": step_seq, "is_valid": 1, "pre_type": case['前置类型'],
                                          "pre": case['前置条件'],
                                          "step_type": case['操作类型'], "step": case['操作步骤'], "step_data": case['操作数据'],
                                          "expect_type": case['检查类型'],
                                          "expect_content": case['检查内容'], "expect": case['预期结果'], "comment": case['备注']}
                            MSCaseSteps.append(MSCaseStep)
                            classfile.write('\t\tresult = self.paladin.do_action(case)\n')

                        # 检查类型特殊处理
                        if case['检查类型'] == '自定义脚本':  # 如果是自定义脚本（自定义脚本每行前的tab占位符可以用空格来代替，写用例后要校验一下脚本能否编译通过）：
                            classfile.write('\t\tlogger.info(\'执行检查自定义脚本\')\n')
                            classfile.write('%s\n\n' % _generate_script(case['检查内容']))
                        elif case['操作类型'] == '用例':  # 调用其它操作用例不用断言
                            pass
                        else:
                            classfile.write(
                                '\t\tassert result == case[\'预期结果\'],\'实际结果[%s]不等于预期结果[%s]\'%(result,case[\'预期结果\'])\n\n')

                        # MeterSpere
                        MSCase["steps"] = MSCaseSteps
                    MSCases.append(MSCase)
                    # 每个脚本执行后的操作
                    classfile.write('\n\tdef teardown_class(self):\n')
                    classfile.write('\t\tself.paladin.exit()\n')

                logger.info('【%s】生成完成,共%s条用例' % (sheetname, case_cnt))

                sheetcnt += 1
                try:
                    # 生成后编译一下脚本，如果编译异常则退出
                    re = os.system('python %s' % filename)
                    if re == 0:
                        logger.info('【%s】编译正确' % filename)
                    else:
                        logger.error('【%s】编译不通过！' % filename)
                        sys.exit(1)
                except:
                    pass
            logger.info('******【%s】共生成%s个用例脚本' % (packagename, sheetcnt))
            logger.info('----------处理完成：%s----------' % self.filename)

            import json
            print(json.dumps(MSCases, ensure_ascii=False))

        except Exception as ex:
            logger.error('生成用例脚本异常！')
            logger.error(ex)
            traceback.print_stack()

    def check_case(self, case):
        flag = 0

        # 前置操作
        if case['前置类型'] is not None and case['前置类型'] != '' and case['前置类型'] not in list(x.value for x in PreType):
            logger.error('前置类型有误！%s' % case['前置类型'])
            flag += 1
        if case['前置类型'] is not None and case['前置条件'] is None:
            logger.error('前置类型不为空时，前置条件必填')
            flag += 1

        # 操作检查
        if case['操作类型'] is None or case['操作类型'] == '' or case['操作类型'] not in list(x.value for x in Ele) + list(
                x.value for x in CaseType):
            logger.error('操作类型有误！%s' % case['操作类型'])
            flag += 1
        if case['操作步骤'] is None:
            logger.error('操作步骤不能为空！')
            flag += 1
        if case['操作类型'] in (Ele.INPUT.value, Ele.RICHINPUT.value, Ele.SINGLEDROPDOWN.value, Ele.MULTIDROPDOWN.value,
                            CaseType.LOGIN.value) and case[
            '操作数据'] is None:
            logger.error('操作类型为【%s】时操作数据不能为空！' % case['操作类型'])
            flag += 1

        # 检查
        if case['检查类型'] is not None and case['检查类型'] != '' and case['检查类型'] not in list(x.value for x in ExpectType):
            logger.error('检查类型有误！%s' % case['检查类型'])
            flag += 1
        if case['检查类型'] in (
                ExpectType.DBDATASET.value, ExpectType.DATAGRID.value, ExpectType.DATAGRIDHAS.value,
                ExpectType.EMAILHAS.value, ExpectType.COLUMNVALUE.value,
                ExpectType.PAGEHAS.value,
                ExpectType.TAKESCREEN.value, ExpectType.ATTACHMENT.value, ExpectType.SCRIPT.value) and case[
            '检查内容'] is None:
            logger.error('检查类型为【%s】时检查内容不能为空！' % case['检查类型'])
            flag += 1
        if case['检查类型'] in (
                ExpectType.DATAGRIDTOTAL.value, ExpectType.DATAGRIDCNT.value, ExpectType.COLUMNVALUE.value,
                ExpectType.MESSAGE.value) and case['预期结果'] is None:
            logger.error('检查类型为【%s】时预期结果不能为空！' % case['检查类型'])
            flag += 1
        return True if flag == 0 else False


def generate_all(keyword=''):
    """
    生成所有用例脚本

    Args:
        keyword: 文件名包含该关键字的才生成

    Returns:

    """
    test_case_path = os.path.join(os.path.join(os.environ.get('AutoPaladin'), 'case', 'TestExcel'))
    for f in os.listdir(test_case_path):
        if not f.startswith('~') and not 'Type.xlsx' == f and keyword in f:  # 排除excel的隐藏文件
            ce = CaseGenerator(os.path.join(test_case_path, f))
            ce.generate_case()


if __name__ == '__main__':
    if len(sys.argv) == 2:
        logger.info('生成所有[%s]关键字用例！' % sys.argv[1])
        generate_all(sys.argv[1])
    else:
        logger.info('未传入用例关键字，生成所有用例！')
        generate_all('')
